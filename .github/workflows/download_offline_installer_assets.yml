name: Prepare Full Offline Installer & CNI Assets for CentOS Stream 9 (x86_64)

on:
  workflow_dispatch:

jobs:
  prepare-assets:
    runs-on: ubuntu-22.04
    container:
      image: quay.io/centos/centos:stream9
      options: --privileged --dns 8.8.8.8 --dns 1.1.1.1

    steps:
    - name: Configurar entorno b√°sico y repositorios
      run: |
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        echo "nameserver 1.1.1.1" >> /etc/resolv.conf

        dnf clean all
        rm -rf /var/cache/dnf/*
        rm -f /etc/yum.repos.d/CentOS-*.repo
        rm -f /etc/yum.repos.d/centos*.repo

        cat <<EOF > /etc/yum.repos.d/CentOS-Stream.repo
        [baseos]
        name=CentOS Stream 9 - BaseOS
        baseurl=https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/
        gpgcheck=0
        enabled=1

        [appstream]
        name=CentOS Stream 9 - AppStream
        baseurl=https://mirror.stream.centos.org/9-stream/AppStream/x86_64/os/
        gpgcheck=0
        enabled=1

        [crb]
        name=CentOS Stream 9 - CRB
        baseurl=https://mirror.stream.centos.org/9-stream/CRB/x86_64/os/
        gpgcheck=0
        enabled=1
        EOF

        dnf makecache --refresh

    - name: Instalar herramientas b√°sicas
      run: |
        dnf update --nogpgcheck -y || true
        dnf install --nogpgcheck --allowerasing -y \
          curl  wget tar gzip bash git shadow-utils \
          yum-utils device-mapper-persistent-data lvm2 util-linux rpm-build \
          conntrack-tools ethtool iproute socat ebtables libseccomp \
          python3 python3-pip gnupg2 which findutils

    - name: Configurar Docker
      run: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2376 &
        sleep 20
        docker --version

    # (El resto de los pasos siguen igual, solo con la ruta EPEL y releasever actualizado)
    - name: Configurar repositorio EPEL
      run: |
        if ! dnf repolist enabled | grep -q epel; then
          echo "Instalando EPEL para Stream 9..."
          dnf install --nogpgcheck -y \
            https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm || \
            echo "‚ö†Ô∏è EPEL no disponible para Stream 9"
        fi

        dnf config-manager --set-enabled crb 2>/dev/null || \
        dnf config-manager --set-enabled powertools 2>/dev/null || \
        echo "CRB/PowerTools no disponible"

    # üîÅ Todos los pasos restantes (descarga de Kubernetes, Docker, im√°genes, scripts, empaquetado) se mantienen igual


    - name: Preparar estructura de directorios
      run: |
        mkdir -p offline-assets/{rpms/{k8s,os,docker},containers,cni-plugins}
        mkdir -p offline-assets/manifests/{calico,flannel,cilium}

    - name: Configurar repositorio Kubernetes
      run: |
        # Asegurar que gnupg2 est√© instalado
        dnf install --nogpgcheck -y gnupg2 || true
        
        # Repositorio Kubernetes v1.33 sin verificaci√≥n GPG inicialmente
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/
        enabled=1
        gpgcheck=0
        EOF

        # Intentar importar clave GPG de Kubernetes (opcional)
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key \
          -o /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes || true
        
        # Importar si est√° disponible
        if [ -f /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes ]; then
          rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes || true
        fi
        
        dnf makecache

    - name: Configurar repositorio EPEL
      run: |
        # Verificar si EPEL ya est√° instalado
        if ! dnf repolist enabled | grep -q epel; then
          echo "Instalando EPEL..."
          dnf install --nogpgcheck -y \
            https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm || \
            echo "‚ö†Ô∏è EPEL no disponible para Stream 10, continuando sin √©l"
        else
          echo "EPEL ya est√° disponible"
        fi
        
        # Habilitar PowerTools/CRB si est√° disponible
        dnf config-manager --set-enabled crb 2>/dev/null || \
        dnf config-manager --set-enabled powertools 2>/dev/null || \
        echo "CRB/PowerTools no disponible"

    - name: Descargar paquetes Kubernetes y containerd
      run: |
        cd offline-assets/rpms/k8s

        # Lista de paquetes Kubernetes essenciales
        k8s_packages=(
          "kubelet"
          "kubeadm" 
          "kubectl"
          "cri-tools"
          "kubernetes-cni"
        )

        echo "Descargando paquetes Kubernetes..."
        for pkg in "${k8s_packages[@]}"; do
          echo "Descargando $pkg..."
          # Intentar m√∫ltiples enfoques para descargar
          if yumdownloader --resolve --destdir=. "$pkg"; then
            echo "‚úÖ $pkg descargado exitosamente"
          elif yumdownloader --destdir=. "$pkg"; then
            echo "‚úÖ $pkg descargado (sin dependencias)"
          else
            echo "‚ùå Error descargando $pkg, intentando con --enablerepo=kubernetes"
            yumdownloader --enablerepo=kubernetes --destdir=. "$pkg" || echo "‚ö†Ô∏è $pkg fall√≥ completamente"
          fi
        done

        # Configurar repositorio Docker si no existe
        if [ ! -f /etc/yum.repos.d/docker-ce.repo ]; then
          curl -o /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo || true
          sed -i 's/\$releasever/9/g' /etc/yum.repos.d/docker-ce.repo || true
        fi

        # Descargar containerd y Docker
        echo "Descargando containerd y Docker..."
        yumdownloader --resolve --destdir=. containerd.io || \
          yumdownloader --enablerepo=docker-ce-stable --destdir=. containerd.io || \
          echo "‚ö†Ô∏è containerd.io no disponible"
        
        yumdownloader --resolve --destdir=. docker-ce docker-ce-cli || \
          echo "‚ö†Ô∏è Algunos paquetes de Docker no se pudieron descargar"

        echo "Archivos descargados:"
        ls -lah *.rpm 2>/dev/null || echo "No se encontraron archivos RPM en k8s"

    - name: Descargar paquetes del sistema
      run: |
        cd offline-assets/rpms/os

        # Paquetes esenciales del sistema
        system_packages=(
          "wget" "curl" "net-tools" "iproute" "bind-utils"
          "openssh" "openssh-clients" "openssh-server" "openssl"
          "ca-certificates" "gnupg2" "tar" "gzip" "unzip"
          "vim-enhanced" "nano" "sudo" "htop" "tmux"
          "rsync" "which" "lsof" "tcpdump" "nmap-ncat"
          "iptables" "firewalld" "chrony" "logrotate"
        )

        echo "Descargando paquetes del sistema..."
        for pkg in "${system_packages[@]}"; do
          echo "Intentando descargar $pkg..."
          if yumdownloader --resolve --destdir=. "$pkg"; then
            echo "‚úÖ $pkg descargado"
          else
            echo "‚ö†Ô∏è $pkg no disponible, continuando..."
          fi
        done

        ls -lah *.rpm 2>/dev/null || echo "No se encontraron archivos RPM en os"

    - name: Descargar im√°genes de contenedores Kubernetes
      run: |
        cd offline-assets/containers

        # Obtener las im√°genes requeridas por kubeadm
        k8s_version="v1.33.0"
        
        # Im√°genes principales de Kubernetes
        k8s_images=(
          "registry.k8s.io/kube-apiserver:$k8s_version"
          "registry.k8s.io/kube-controller-manager:$k8s_version"
          "registry.k8s.io/kube-scheduler:$k8s_version"
          "registry.k8s.io/kube-proxy:$k8s_version"
          "registry.k8s.io/coredns/coredns:v1.12.0"
          "registry.k8s.io/pause:3.10"
          "registry.k8s.io/etcd:3.5.17-0"
        )

        echo "Descargando im√°genes de Kubernetes..."
        for image in "${k8s_images[@]}"; do
          echo "Descargando $image..."
          if docker pull "$image"; then
            docker save "$image" -o "$(echo $image | tr '/' '_' | tr ':' '_').tar"
            echo "‚úÖ $image guardada"
          else
            echo "‚ùå Error descargando $image"
          fi
        done

        # Im√°genes adicionales √∫tiles
        additional_images=(
          "docker.io/library/busybox:latest"
          "docker.io/library/nginx:latest"
          "docker.io/library/alpine:latest"
        )

        echo "Descargando im√°genes adicionales..."
        for image in "${additional_images[@]}"; do
          echo "Descargando $image..."
          if docker pull "$image"; then
            docker save "$image" -o "$(echo $image | tr '/' '_' | tr ':' '_').tar"
            echo "‚úÖ $image guardada"
          else
            echo "‚ö†Ô∏è Error descargando $image"
          fi
        done

    - name: Descargar plugins CNI
      run: |
        cd offline-assets/cni-plugins
        
        # Descargar CNI plugins
        CNI_VERSION="v1.7.1"
        wget -O cni-plugins-linux-amd64-$CNI_VERSION.tgz \
          "https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION/cni-plugins-linux-amd64-$CNI_VERSION.tgz"

    - name: Descargar manifiestos Calico
      run: |
        cd offline-assets/manifests/calico
        
        # Descargar manifiestos de Calico
        CALICO_VERSION="v3.29.1"
        
        wget -O calico.yaml \
          "https://raw.githubusercontent.com/projectcalico/calico/$CALICO_VERSION/manifests/calico.yaml"
        
        wget -O calicoctl \
          "https://github.com/projectcalico/calico/releases/download/$CALICO_VERSION/calicoctl-linux-amd64"
        chmod +x calicoctl

    - name: Descargar manifiestos Flannel
      run: |
        cd offline-assets/manifests/flannel
        
        # Descargar manifiesto de Flannel
        wget -O kube-flannel.yml \
          "https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml"

    - name: Descargar manifiestos Cilium
      run: |
        cd offline-assets/manifests/cilium
        
        # Descargar CLI de Cilium
        CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
        CLI_ARCH=amd64
        
        wget -O cilium-linux-${CLI_ARCH}.tar.gz \
          "https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz"
        
        tar xzvf cilium-linux-${CLI_ARCH}.tar.gz
        chmod +x cilium

    - name: Crear scripts de instalaci√≥n
      run: |
        # Script principal de instalaci√≥n
        cat <<'EOF' > offline-assets/install.sh
        #!/bin/bash
        set -e

        echo "=== Instalador Offline Kubernetes para CentOS Stream 10 ==="

        # Verificar arquitectura
        if [[ $(uname -m) != "x86_64" ]]; then
          echo "‚ùå Este instalador solo funciona en arquitectura x86_64"
          exit 1
        fi

        # Instalar paquetes del sistema
        echo "üì¶ Instalando paquetes del sistema..."
        cd rpms/os
        rpm -Uvh --force --nodeps *.rpm || true
        cd ../..

        # Instalar Docker/containerd
        echo "üê≥ Instalando Docker y containerd..."
        cd rpms/k8s
        rpm -Uvh --force containerd.io*.rpm docker-ce*.rpm || true
        systemctl enable --now containerd
        systemctl enable --now docker
        cd ../..

        # Instalar Kubernetes
        echo "‚ò∏Ô∏è  Instalando Kubernetes..."
        cd rpms/k8s
        rpm -Uvh --force kubelet*.rpm kubeadm*.rpm kubectl*.rpm cri-tools*.rpm kubernetes-cni*.rpm || true
        systemctl enable kubelet
        cd ../..

        # Instalar CNI plugins
        echo "üîå Instalando CNI plugins..."
        mkdir -p /opt/cni/bin
        cd cni-plugins
        tar -xzf cni-plugins-linux-amd64-*.tgz -C /opt/cni/bin/
        cd ..

        # Cargar im√°genes de contenedores
        echo "üì¶ Cargando im√°genes de contenedores..."
        cd containers
        for img in *.tar; do
          echo "Cargando $img..."
          docker load -i "$img" || true
        done
        cd ..

        echo "‚úÖ Instalaci√≥n completada!"
        echo "Para inicializar el cluster: kubeadm init"
        echo "CNI disponibles en: manifests/"
        EOF

        chmod +x offline-assets/install.sh

        # Script para instalar Calico
        cat <<'EOF' > offline-assets/install-calico.sh
        #!/bin/bash
        kubectl apply -f manifests/calico/calico.yaml
        echo "‚úÖ Calico instalado"
        EOF

        # Script para instalar Flannel  
        cat <<'EOF' > offline-assets/install-flannel.sh
        #!/bin/bash
        kubectl apply -f manifests/flannel/kube-flannel.yml
        echo "‚úÖ Flannel instalado"
        EOF

        # Script para instalar Cilium
        cat <<'EOF' > offline-assets/install-cilium.sh
        #!/bin/bash
        cp manifests/cilium/cilium /usr/local/bin/
        cilium install
        echo "‚úÖ Cilium instalado"
        EOF

        chmod +x offline-assets/install-*.sh

    - name: Crear documentaci√≥n
      run: |
        cat <<'EOF' > offline-assets/README.md
        # Instalador Offline Kubernetes para CentOS Stream 10

        ## Contenido del paquete

        - `rpms/k8s/`: Paquetes RPM de Kubernetes, Docker y containerd
        - `rpms/os/`: Paquetes del sistema y herramientas de debugging
        - `containers/`: Im√°genes de contenedores pre-descargadas
        - `cni-plugins/`: Plugins CNI
        - `manifests/`: Manifiestos para Calico, Flannel y Cilium
        - `install.sh`: Script principal de instalaci√≥n
        - `install-*.sh`: Scripts para instalar CNI espec√≠ficos

        ## Instalaci√≥n

        1. Extraer el paquete:
           ```bash
           tar -xzf offline_assets_bundle_x86_64.tar.gz
           cd offline-assets
           ```

        2. Ejecutar instalaci√≥n:
           ```bash
           sudo ./install.sh
           ```

        3. Inicializar cluster:
           ```bash
           sudo kubeadm init --pod-network-cidr=192.168.0.0/16
           ```

        4. Configurar kubectl:
           ```bash
           mkdir -p $HOME/.kube
           sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
           sudo chown $(id -u):$(id -g) $HOME/.kube/config
           ```

        5. Instalar CNI (elegir uno):
           ```bash
           # Para Calico
           ./install-calico.sh
           
           # Para Flannel
           ./install-flannel.sh
           
           # Para Cilium
           ./install-cilium.sh
           ```

        ## Herramientas de debugging incluidas

        - htop, tmux, vim, nano
        - tcpdump, nmap-ncat, lsof
        - bind-utils (dig, nslookup)
        - net-tools (netstat, ifconfig)

        ## Troubleshooting

        - Verificar servicios: `systemctl status kubelet containerd docker`
        - Ver logs: `journalctl -u kubelet -f`
        - Verificar im√°genes: `docker images`
        - Estado del cluster: `kubectl get nodes`
        EOF

    - name: Verificar contenido final
      run: |
        echo "=== Resumen del paquete generado ==="
        find offline-assets -type f -name "*.rpm" | wc -l | xargs echo "RPMs totales:"
        find offline-assets -type f -name "*.tar" | wc -l | xargs echo "Im√°genes de contenedores:"
        
        echo -e "\n=== Estructura de directorios ==="
        tree offline-assets || find offline-assets -type d
        
        echo -e "\n=== Tama√±o total ==="
        du -sh offline-assets

    - name: Crear paquete comprimido final
      run: |
        tar -czf offline_assets_bundle_x86_64.tar.gz offline-assets
        ls -lh offline_assets_bundle_x86_64.tar.gz

    - name: Subir artefacto
      uses: actions/upload-artifact@v4
      with:
        name: offline_assets_bundle_x86_64
        path: offline_assets_bundle_x86_64.tar.gz
        retention-days: 30
